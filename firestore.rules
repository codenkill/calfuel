rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isUserOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function for rate limiting
    function requestLimitNotExceeded() {
      let recentRequests = request.time.toMillis() - get(/databases/$(database)/documents/users/$(request.auth.uid)/requests/counter).data.lastRequest;
      return recentRequests > 500; // Minimum 500ms between requests
    }

    // Data validation helpers
    function isValidMeal() {
      let meal = request.resource.data;
      return meal.name is string &&
             meal.name.size() > 0 &&
             meal.totalCalories is number &&
             meal.totalCalories >= 0 &&
             meal.totalProtein is number &&
             meal.totalProtein >= 0 &&
             meal.totalCarbs is number &&
             meal.totalCarbs >= 0 &&
             meal.totalFat is number &&
             meal.totalFat >= 0;
    }

    function isValidFood() {
      let food = request.resource.data;
      return food.name is string &&
             food.name.size() > 0 &&
             food.serving is number &&
             food.serving > 0 &&
             food.calories is number &&
             food.calories >= 0 &&
             food.protein is number &&
             food.protein >= 0 &&
             food.carbs is number &&
             food.carbs >= 0 &&
             food.fat is number &&
             food.fat >= 0;
    }

    match /users/{userId} {
      allow create: if isUserOwner(userId);
      allow read, update: if isUserOwner(userId);
      
      match /foods/{foodId} {
        allow create: if isUserOwner(userId) 
                     && requestLimitNotExceeded()
                     && isValidFood();
        allow read: if isUserOwner(userId);
        allow update: if isUserOwner(userId) 
                     && requestLimitNotExceeded()
                     && isValidFood();
        allow delete: if isUserOwner(userId)
                     && requestLimitNotExceeded();
      }
      
      match /meals/{mealId} {
        allow create: if isUserOwner(userId)
                     && requestLimitNotExceeded()
                     && isValidMeal();
        allow read: if isUserOwner(userId);
        allow update: if isUserOwner(userId)
                     && requestLimitNotExceeded()
                     && isValidMeal();
        allow delete: if isUserOwner(userId)
                     && requestLimitNotExceeded();
      }

      match /requests/counter {
        allow read, write: if isUserOwner(userId);
      }
    }

    // Allow read access to connection test document
    match /_connection_test_/{document=**} {
      allow read: if isAuthenticated();
    }
  }
}